{"version":3,"sources":["components/Task.js","components/Tasks.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","state","intervalId","currentCount","status","timer","bind","this","task","setInterval","setState","clearInterval","finishTask","className","class","style","height","role","width","id","server","onClick","deleteTask","disabled","Component","Tasks","tasks","map","index","active","key","Body","servers","name","addTasks","attachServers","addServer","existingServers","length","serverObject","Object","prevState","i","numberOfExistingTasks","tasksArray","totalTasks","Number","document","getElementById","value","taskObject","push","findIndex","x","getNextServerIndex","forceUpdate","taskIndex","serverIndex","slice","aria-label","type","deleteServer","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e8bd9ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Task extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            intervalId: \"\",\r\n            currentCount: 0,\r\n            status: \"not_started\"\r\n        }\r\n        this.timer = this.timer.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.task.status == \"started\") {\r\n            var intervalId = setInterval(this.timer, 1000);\r\n            // store intervalId in the state so it can be accessed later:\r\n            this.setState({ intervalId: intervalId });\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.task.status != this.state.status && this.props.task.status == \"started\") {\r\n            var intervalId = setInterval(this.timer, 1000);\r\n            this.setState({\r\n                status: \"started\",\r\n                intervalId: intervalId\r\n            })\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.intervalId);\r\n    }\r\n\r\n    async timer() {\r\n        // setState method is used to update the state\r\n        await this.setState({ currentCount: this.state.currentCount + 1 });\r\n        if ((this.state.currentCount) == 20) {\r\n            this.props.finishTask(this.props.task.task);\r\n            clearInterval(this.state.intervalId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-2\">\r\n                <div className=\"col-10\">\r\n                    <div class={`progress`} style={{ height: \"100%\" }}>\r\n                        <div class={`progress-bar ${this.props.task.status == \"done\" ? 'bg-success' : this.props.task.status == \"started\" ? 'progress-bar-striped progress-bar-animated' : 'bg-warning'}`} role=\"progressbar\" style={{ width: this.props.task.status == \"started\" ? (this.state.currentCount * 5) + \"%\" : this.props.task.status == \"done\" ? \"100%\" : \"0%\" }} id={this.props.task.task}></div>\r\n                        <div className={`placeholder ${this.props.task.status == \"not_started\" ? 'colorBlack' : ''}`}>{this.props.task.status == \"started\" ? this.state.currentCount + \" secs completed || Running on Server \" + this.props.task.server : this.props.task.status == \"not_started\" ? \"Waiting for server...\" : \"Done\"}</div>\r\n                    </div>\r\n                </div >\r\n                <div className=\"col-2\">\r\n                    <button className=\"btn btn-danger btn-block\" onClick={() => this.props.deleteTask(this.props.task.task)} disabled={this.props.task.status == \"not_started\" ? false : \"disabled\"}>Delete</button>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Task from './Task'\r\nexport default class Tasks extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.tasks.map((task, index) => {\r\n                        if (task.active == true) {\r\n                            return <Task key={index} task={task} finishTask={this.props.finishTask} deleteTask={this.props.deleteTask}></Task>\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../App.css';\r\nimport Tasks from './Tasks';\r\nexport default class Body extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            servers: [{\r\n                name: 1,\r\n                task: \"\",\r\n                active: true\r\n            }],\r\n            tasks: []\r\n        }\r\n        this.addTasks = this.addTasks.bind(this);\r\n        this.attachServers = this.attachServers.bind(this);\r\n        this.finishTask = this.finishTask.bind(this);\r\n        this.deleteTask = this.deleteTask.bind(this);\r\n        this.addServer = this.addServer.bind(this);\r\n    }\r\n\r\n    async addServer() {\r\n        var existingServers = this.state.servers.length;\r\n        if (existingServers < 10) {\r\n            var serverObject = new Object();\r\n            serverObject.name = existingServers + 1;\r\n            serverObject.task = \"\"\r\n            serverObject.active = true\r\n            await this.setState(prevState => ({\r\n                servers: [...prevState.servers, serverObject]\r\n            }))\r\n            for (var i = 0; i < this.state.servers.length; i++) {\r\n                this.attachServers();\r\n            }\r\n        }\r\n    }\r\n\r\n    async addTasks() {\r\n        var numberOfExistingTasks = this.state.tasks.length;\r\n        var tasksArray = [...this.state.tasks];\r\n        var totalTasks = Number(document.getElementById('numberOfTasks').value) + numberOfExistingTasks;\r\n        for (var i = (numberOfExistingTasks + 1); i <= totalTasks; i++) {\r\n            var taskObject = new Object();\r\n            taskObject.task = i;\r\n            taskObject.server = \"\";\r\n            taskObject.status = \"not_started\";\r\n            taskObject.active = true;\r\n            tasksArray.push(taskObject);\r\n        }\r\n        await this.setState({\r\n            tasks: tasksArray\r\n        })\r\n        for (var i = 0; i < this.state.servers.length; i++) {\r\n            this.attachServers();\r\n        }\r\n        document.getElementById('numberOfTasks').value = \"\"\r\n    }\r\n\r\n    attachServers() {\r\n        var index = this.state.servers.findIndex(x => x.task === \"\" && x.active == true);\r\n        if (index != -1) {\r\n            var getNextServerIndex = this.state.tasks.findIndex(x => x.status == \"not_started\" && x.active == true);\r\n            if (getNextServerIndex != -1) {\r\n                this.state.servers[index].task = this.state.tasks[getNextServerIndex].task;\r\n                this.state.tasks[getNextServerIndex].server = this.state.servers[index].name;\r\n                this.state.tasks[getNextServerIndex].status = \"started\";\r\n                this.forceUpdate();\r\n            }\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    async finishTask(task) {\r\n        var taskIndex = this.state.tasks.findIndex(x => x.task === task);\r\n        var serverIndex = this.state.servers.findIndex(x => x.task === task);\r\n        if (serverIndex != \"-1\") {\r\n            this.state.servers[serverIndex].task = \"\";\r\n        }\r\n        if (taskIndex != \"-1\") {\r\n            this.state.tasks[taskIndex].status = \"done\";\r\n        }\r\n        await this.forceUpdate();\r\n        for (var i = 0; i < this.state.servers.length; i++) {\r\n            this.attachServers();\r\n        }\r\n    }\r\n\r\n    deleteTask(task) {\r\n        var taskIndex = this.state.tasks.findIndex(x => x.task === task);\r\n        if ((taskIndex + 1) == this.state.tasks.length) {\r\n            this.setState({\r\n                tasks: this.state.tasks.slice(0, this.state.tasks.length - 1)\r\n            })\r\n        } else {\r\n            this.state.tasks[taskIndex].active = false;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    deleteServer(server) {\r\n        var serverIndex = this.state.servers.findIndex(x => x.name === server);\r\n        if ((serverIndex + 1) == this.state.servers.length) {\r\n            this.setState({\r\n                servers: this.state.servers.slice(0, this.state.servers.length - 1)\r\n            })\r\n        } else {\r\n            this.state.servers[serverIndex].active = false;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-2\">\r\n                        <button className=\"btn btn-primary btn-block\" onClick={this.addServer}>Add Server</button>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {\r\n                            this.state.servers.map((server, index) => {\r\n                                if (server.active == true) {\r\n                                    return (\r\n                                        <div key={index} className=\"btn-group mr-2 mb-2\" role=\"group\" aria-label=\"Basic example\">\r\n                                            <button type=\"button\" className=\"btn btn-outline-primary px-4 pointerEventsDisabled\">Server {server.name}</button>\r\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => this.deleteServer(server.name)} disabled={server.task == \"\" ? server.name == \"1\" ? true : false : true}>X</button>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-2\">\r\n                        <button className=\"btn btn-primary btn-block\" onClick={this.addTasks}>Add Tasks</button>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <input className=\"form-control\" type=\"text\" id=\"numberOfTasks\" placeholder=\"Number of Tasks\"></input>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <Tasks tasks={this.state.tasks} finishTask={this.finishTask} deleteTask={this.deleteTask}></Tasks>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport Body from './components/Body'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Body></Body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}